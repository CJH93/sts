package com.fullstack.utils;

import java.time.ZonedDateTime;
import java.util.Date;
import java.util.Map;

import javax.crypto.SecretKey;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.Keys;

/*
 * JWT 생성 클래스
 * 암호화를 적용해서 내용을 처리한다.
 * 암호화 하는 방법은 몇 종류가 되는데, SHAKey 암호화 알고리즘을 적용해서 진행할 예정
 * 이때 중요한게 생성키. 반드시 30자 이상의 고유키가 필요함. 작으면 에러 가능성이 큼
 */

public class JWTUtil {
	
	private static String Key = "123456asdg789012345678901234567890asdf81768123456asdg789012345678901234567890asdf817682825123456asdg789012345678901234567890asdf817682825123456asdg789012345678901234567890asdf817682825123456asdg789012345678901234567890asdf817682825123456asdg789012345678901234567890asdf817682825123456asdg789012345678901234567890asdf817682825123456asdg789012345678901234567890asdf817682825123456asdg789012345678901234567890asdf817682825123456asdg789012345678901234567890asdf817682825123456asdg789012345678901234567890asdf817682825123456asdg789012345678901234567890asdf8176828252825";
	
	// 클라이언트에 넘길 내용을 암호화 하여 생성함
	// 유효기간도 설정
	public static String generateToken(Map<String, Object> valueMap, int min) 
	{
		SecretKey key = null;
		
		try 
		{
			key = Keys.hmacShaKeyFor(JWTUtil.Key.getBytes("UTF-8")); 
		} 
		catch (Exception e) 
		{
			throw new RuntimeException(e.getMessage());
		}
		
		String jwtStr = Jwts.builder()
				.setHeader(Map.of("typ", "JWT"))
				.setClaims(valueMap)
				.setIssuedAt(Date.from(ZonedDateTime.now().toInstant()))
				.setExpiration(Date.from(ZonedDateTime.now().plusMinutes(min).toInstant()))
				.signWith(key)
				.compact();
		
		return jwtStr;
	}
	
	// 토큰 검증 메서드 정의
	// 토큰을 검증해서 실패시 처리 할 내용 정의
	public static Map<String, Object> validateToKen(String token)
	{
		Map<String, Object> claim = null;
		
		try 
		{
			SecretKey key = Keys.hmacShaKeyFor(JWTUtil.Key.getBytes("UTF-8"));
			
			claim = Jwts.parserBuilder()
					.setSigningKey(key)
					.build()
					.parseClaimsJws(token)
					.getBody();
		} 
		catch (Exception e) 
		{
			System.out.println("JWT 토큰 예외: " + e.getMessage());
		}
		
		return claim;
	}
	
}







