package com.fullstack.config;

import java.util.Arrays;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

import com.fullstack.security.APILoginFailHandler;
import com.fullstack.security.APILoginSuccessHandler;
import com.fullstack.security.JWTCheckerFilter;

import lombok.RequiredArgsConstructor;
import lombok.extern.log4j.Log4j2;

/*
 * API 서버는 외부에서 Ajax 로 호출되기 때문에, 기존의 JSP 서버 방식과 차이가 있음
 * 스프링 Secure 은 기본적으로 다른 도메인에서 Ajax 호출을 차단함
 * 때문에 CORS 설정과 Get 방식 외의 호출 시에 CSRF 공격을 막기 위한 설정이
 * 기본적으로 활성화 되어 있으므로 이를 변경해주고 개발 해야함
 * 
 * 이 설정 클래스는 이를 적용할 클래스이고, 추가적으로 인증에 관련된 모듈도 추가함
 */

@Configuration
@Log4j2
@RequiredArgsConstructor
public class CustonmSecurityConfig {

	@Bean
	// 위 설정이 적용된 빈을 리턴하는 메서드 정의
	public SecurityFilterChain filterChain(HttpSecurity http) throws Exception
	{
		log.info("---------------------Security Config-------------------------");
		
		// cors 설정
		http.cors(httpSecurityCorsConfigurer -> {
			httpSecurityCorsConfigurer.configurationSource(corsSource());
		});
		
		// 세션 기반 인증을 무효화 하기 위한 설정 추가. 서블릿 기반의 세션 인증은 사용 불가
		// 만약 사용하려면 이걸 삭제하면 됨
		http.sessionManagement(sessionConf -> sessionConf.sessionCreationPolicy(SessionCreationPolicy.STATELESS));
		
		// GET 방식을 제외하고는 CSRF 토큰을 기반으로 인증 / 인가 처리
		// 이 설정도 추가 해야함.
		http.csrf(csrf -> csrf.disable());
		
		// formLogin 설정을 추가하면 스프링시큐어는 post 방식으로
		// username 과 password 라는 파라미터를 통해 로그인을 처리할 수 있도록 함
		http.formLogin(con -> {
			con.loginPage("/api/member/login");
			
			// 로그인이 완료되면 등록된 핸들러로 핸들링 하도록 설정
			con.successHandler(new APILoginSuccessHandler());
			// 로그인 실패시 실패 핸들러를 통한 메세지 전송 처리
			con.failureHandler(new APILoginFailHandler());
		});
		
		http.addFilterBefore(new JWTCheckerFilter(), UsernamePasswordAuthenticationFilter.class);
		
		return http.build();
	}
	
	@Bean
	public CorsConfigurationSource corsSource()
	{
		CorsConfiguration corsConfiguration = new CorsConfiguration();
		
		corsConfiguration.setAllowedOriginPatterns(Arrays.asList("*"));
		corsConfiguration.setAllowedMethods(Arrays.asList("HEAD", "GET", "POST", "PUT", "DELETE"));
		corsConfiguration.setAllowedHeaders(Arrays.asList("Authorizetion", "Cache-Control", "Content-Type"));
		corsConfiguration.setAllowCredentials(true);
		
		UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
		
		source.registerCorsConfiguration("/**", corsConfiguration);
		
		return source;
	}
	
	// 암호를 암호화 해주는 빈 등록
	// SpringBoot 에서는 BCryptPas 라는 빈을 기본적으로 제고 해줌
	// 이것을 기본 암호화 설정 모듈로 등록해서 사용
	@Bean
	public BCryptPasswordEncoder passwordEncoder ()
	{
		return new BCryptPasswordEncoder();
	}
	
}










